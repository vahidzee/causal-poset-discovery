project: synthetic-param-gaussian-big-dysweep
default_root_dir: experiments/sweep
count: 10000

base_config:
  seed_everything: 100
  # This is a sweep on different phase changing strategies and how
  # it can affect the training process for larger datasets
  trainer:
    # callbacks
    callbacks:
      - class_path: ocd.training.callbacks.data_visualizer.DataVisualizer
      - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
        init_args:
          maximization_epoch_limit: 100
          expectation_epoch_limit: 80
          patience: 15
          cooldown: 200
          monitor_validation: False
          monitor_training: True
          reset_optimizers: False
          reinitialize_weights_on_maximization: False
      - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
        init_args:
          save_path: experiments/final_runs/sweeps/synthetic-small-parametric
          num_samples: 5000
          log_every_n_epochs: 5
    accelerator: gpu
    devices: 1
    num_nodes: 0
    log_every_n_steps: 1
    check_val_every_n_epoch: 1
    enable_checkpointing: true
    enable_model_summary: true
    enable_progress_bar: false
    max_epochs: 3200
    # max_epochs: 1
    logger:
      class_path: lightning.pytorch.loggers.WandbLogger
      init_args:
        project: smart-trainer
  data:
    class_path: lightning_toolbox.DataModule
    init_args:
      batch_size: 128
      dataset: ocd.data.SyntheticOCDDataset
      dataset_args:
        standardization: True
        reject_outliers_n_far_from_mean: 5
        name: synthetic_big
        observation_size: 1000
      val_size: 0.01

  model:
    class_path: ocd.training.module.OCDafTrainingModule
    init_args:
      # the model
      model_cls: ocd.models.ocdaf.OCDAF
      model_args:
        # Permutation learner arguments
        use_permutation: True
        permutation_learner_cls: ocd.models.permutation.LearnablePermutation
        permutation_learner_args:
          gumbel_noise_std:
            code: |
              def func(self, training_module, **kwargs):
                tot_epochs_on_exp = 3200 / 180 * 80
                step_size = 2.0 / tot_epochs_on_exp
                if not hasattr(training_module, 'last_std'):
                  training_module.last_std = 2.0
                
                # if you don't have the epoch from before then assign it
                if not hasattr(training_module, 'last_epoch_std_sched'):
                  training_module.last_epoch_std_sched = training_module.current_epoch
                
                if training_module.current_phase != 'maximization' and training_module.last_epoch_std_sched != training_module.current_epoch:
                  training_module.last_std -= step_size
                
                training_module.last_epoch_std_sched = training_module.current_epoch

                return training_module.last_std
            function_of_interest: func
          permutation_type: gumbel-topk
        # Base distribution arguments
        base_distribution: torch.distributions.Normal
        base_distribution_args:
          loc: 0.0
          scale: 1.0
        # The flow model arguments
        layers: [10, 30, 10]
        populate_features: True
        layers_limit: [100, 300, 50]
        num_transforms: 1
        additive: False
        residual: False
        bias: true
        # activations
        activation: torch.nn.LeakyReLU
        activation_args:
          negative_slope: 0.1
      # the optimizer
      optimizer_parameters:
        - model.flow
        - model.permutation_model
      optimizer_is_active:
        - >
          lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
        - >
          lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
      grad_clip_val: 1.0
      lr: [0.01, 0.01]
      optimizer: [torch.optim.AdamW, torch.optim.AdamW]
      optimizer_args:
        - weight_decay: 0.1
        - weight_decay: 0.01
      scheduler:
        - torch.optim.lr_scheduler.ReduceLROnPlateau
        - torch.optim.lr_scheduler.ReduceLROnPlateau
      scheduler_args:
        - mode: min
          min_lr: 0.00005
          threshold: 0.001
          factor: 0.5
          patience: 140
        - mode: min
          min_lr: 0.0005
          threshold: 0.001
          factor: 0.5
          patience: 110
      scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
      scheduler_optimizer: [0, 1]
      scheduler_monitor: ["loss", "loss"]
      objective_args:
        nll:
          code: >
            def func(training_module, batch):
              t = training_module.forward(batch)
              res = t['log_prob']
              return -res.mean()
          function_of_interest: func

sweep_configuration:
  method: grid
  metric:
    goal: minimize
    name: metrics/average-backward_relative_penalty
  parameters:
    dy__upsert:
      - sweep: True
        sweep_identifier: C_graph_size_and_scheduling
        sweep_alias:
          - n10
          - n25
        values:
          - data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_n10")
                  scm_generator_args:
                    graph_generator_args:
                      n: 10
                      graph_type: erdos_renyi
                      p: 0.4
            model:
              init_args:
                model_args:
                  in_features: 10
          - data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_n25")
                  scm_generator_args:
                    graph_generator_args:
                      n: 25
                      graph_type: erdos_renyi
                      p: 0.4
            model:
              init_args:
                model_args:
                  in_features: 25
                  permutation_learner_args:
                    # for preventing CUDA out of memory
                    maximum_basis_size: 64
      - sweep: True
        sweep_identifier: E_scm_type
        sweep_alias:
          - cubed_dislocate
          - sin_plus_x
          - non_param
        values:
          - data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_CubeDislocate")
                  scm_generator: ocd.data.synthetic.ParametricSCMGenerator
                  scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    noise_parameters:
                      loc: 0.0
                      scale: 1.0
                    noise_type: normal
                    s_function:
                      function_descriptor: |
                        def func(x):
                          x[x < 100] = numpy.log(1 + numpy.exp(x[x < 100]))
                          return x
                      function_of_interest: func
                    s_function_signature: softplus
                    t_function:
                      function_descriptor: |
                        def func(x):
                          x[x > 100] = 100
                          x[x < -100] = -100
                          x_mean = numpy.mean(x)
                          x_std = numpy.std(x)
                          if x_std == 0:
                            x_std = 1
                          x = (x - x_mean) / x_std
                          ret = x**3 + 6
                          return ret
                      function_of_interest: func
                    t_function_signature: cube_and_dislocate
                    weight_s: [0.5, 1.5]
                    weight_t: [0.5, 1.5]
                val_size: 0.01
                batch_size: 128
            # Put scale transform for the parametric ones
            model:
              init_args:
                model_args:
                  scale_transform: true
                  scale_transform_s_args:
                    pre_act_scale: 0.4
                    post_act_scale: 5.
                  scale_transform_t_args:
                    pre_act_scale: 0.05
                    post_act_scale: 20.
          - data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_SinPlusX")
                  scm_generator: ocd.data.synthetic.ParametricSCMGenerator
                  scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    noise_parameters:
                      loc: 0.0
                      scale: 1.0
                    noise_type: normal
                    s_function:
                      function_descriptor: |
                        def func(x):
                          x[x < 100] = numpy.log(1 + numpy.exp(x[x < 100]))
                          return x
                      function_of_interest: func
                    s_function_signature: softplus
                    t_function:
                      function_descriptor: |
                        def func(x):
                          return numpy.sin(x) + x
                      function_of_interest: func
                    t_function_signature: sin_plus_x
                    weight_s: [0.5, 1.5]
                    weight_t: [0.5, 1.5]
          - data:
              class_path: lightning_toolbox.DataModule
              init_args:
                dataset: ocd.data.SyntheticOCDDataset
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_NonParam")
                  observation_size: 1000
                  scm_generator: ocd.data.synthetic.GaussianProcessBasedSCMGeberator
                  scm_generator_args:
                    graph_generator: ocd.data.scm.GraphGenerator
                    noise_mean: 0.0
                    noise_std: 1.0
                    s_gamma_rbf_kernel: 1.0
                    s_mean_function_activation:
                      function_descriptor:
                        "def func(x):\n    x[x < 100] = numpy.log(1 + numpy.exp(x[x\
                        \ < 100]))\n    return x"
                      function_of_interest: func
                    s_mean_function_activation_signature: softplus
                    s_mean_function_weights:
                      - 0.01
                      - 0.1
                    s_variance_rbf_kernel: 1.0
                    t_mean_function_activation:
                      function_descriptor: |
                        def func(x):
                          x[x > 100] = 100
                          x[x < -100] = -100
                          x_mean = numpy.mean(x)
                          x_std = numpy.std(x)
                          if x_std == 0:
                            x_std = 1
                          x = (x - x_mean) / x_std
                          ret = x + numpy.sin(x)
                          return ret
                      function_of_interest: func
                    t_mean_function_activation_signature: sin_plus_x
                    t_mean_function_weights:
                      - 0.01
                      - 0.1
                    t_variance_rbf_kernel: 1.0
                val_size: 0.01
                batch_size: 128
            model:
              init_args:
                model_args:
                  scale_transform: false
      - sweep: True
        sweep_identifier: G_seed
        sweep_alias:
          - seedset0
          - seedset1
          - seedset2
          - seedset3
          - seedset4
        values:
          - seed_everything: 10
            data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_seed0")
                  seed: 11
                  scm_generator_args:
                    seed: 13
                    graph_generator_args:
                      seed: 14
          - seed_everything: 20
            data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_seed1")
                  seed: 21
                  scm_generator_args:
                    seed: 23
                    graph_generator_args:
                      seed: 24
          - seed_everything: 30
            data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_seed2")
                  seed: 21
                  scm_generator_args:
                    seed: 23
                    graph_generator_args:
                      seed: 24
          - seed_everything: 40
            data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_seed3")
                  seed: 41
                  scm_generator_args:
                    seed: 43
                    graph_generator_args:
                      seed: 44
          - seed_everything: 50
            data:
              init_args:
                dataset_args:
                  name: >
                    dy__eval(lambda x: f"{x}_seed4")
                  seed: 51
                  scm_generator_args:
                    seed: 53
                    graph_generator_args:
                      seed: 54
