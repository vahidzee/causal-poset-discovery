# example configuration to produce the Birkhoff Polytope plots for the Straight-Through permutation learning method
data:
  class_path: lightning_toolbox.DataModule
  init_args:
    batch_size: 128
    dataset: ocd.data.SyntheticOCDDataset
    dataset_args:
      standardization: True
      reject_outliers_n_far_from_mean: 5.0
      name: synthetic_parametric_non_linear_affine_n3_CubeDislocate_chain_seed4
      observation_size: 1000
      scm_generator: ocd.data.synthetic.ParametricSCMGenerator
      scm_generator_args:
        graph_generator: ocd.data.scm.GraphGenerator
        graph_generator_args: { graph_type: full, n: 3, seed: 689 }
        noise_type: normal
        noise_parameters:
          scale: 1.0
          loc: 0.0
        s_function:
          { function_descriptor: "def func(x):\n    x[x < 100] = numpy.log(1\
              \ + numpy.exp(x[x < 100]))\n    return x", function_of_interest: func }
        s_function_signature: softplus
        seed: 870
        t_function:
          function_descriptor: |
            def func(x):
              x[x > 100] = 100
              x[x < -100] = -100
              x_mean = numpy.mean(x)
              x_std = numpy.std(x)
              if x_std == 0:
                x_std = 1
              x = (x - x_mean) / x_std
              ret = x**3 + 6
              return ret
          function_of_interest: func
        t_function_signature: sin_plus_x
        weight_s: [0.5, 1.5]
        weight_t: [0.5, 1.5]
      seed: 139
    val_size: 0.1
model:
  class_path: ocd.training.module.OCDafTrainingModule
  init_args:
    # the model
    model_cls: ocd.models.ocdaf.OCDAF
    model_args:
      # Permutation learner arguments
      use_permutation: True
      permutation_learner_cls: ocd.models.permutation.LearnablePermutation
      permutation_learner_args:
        gumbel_noise_std: >
          lambda self, training_module, **kwargs: 2 - (2 / (training_module.trainer.max_epochs)) * (training_module.current_epoch)
        permutation_type: straight-through-noisy
      # Base distribution arguments
      base_distribution: torch.distributions.Normal
      base_distribution_args:
        loc: 0.0
        scale: 1.0
      # The flow model arguments
      layers: [10, 5, 5]
      populate_features: True
      layers_limit: [100, 300, 50]
      num_transforms: 1
      additive: False
      residual: False
      bias: true
      # activations
      activation: torch.nn.LeakyReLU
      activation_args:
        negative_slope: 0.1
      # scale transform is off for non-parametric
      scale_transform: false

    # the optimizer
    optimizer_parameters:
      - model.flow
      - model.permutation_model
    optimizer_is_active:
      - >
        lambda training_module: training_module.current_phase == 'maximization' if hasattr(training_module, 'current_phase') else True
      - >
        lambda training_module: training_module.current_phase == 'expectation' if hasattr(training_module, 'current_phase') else True
    grad_clip_val: 1.0
    lr: [0.01, 0.01]
    optimizer: [torch.optim.AdamW, torch.optim.AdamW]
    optimizer_args:
      - weight_decay: 0.1
      - weight_decay: 0.01
    scheduler:
      - torch.optim.lr_scheduler.ReduceLROnPlateau
      - torch.optim.lr_scheduler.ReduceLROnPlateau
    scheduler_args:
      - mode: min
        min_lr: 0.00005
        threshold: 0.001
      - mode: min
        min_lr: 0.0005
        threshold: 0.001
    scheduler_name: ["lr_scheduler_maximization", "lr_scheduler_expectation"]
    scheduler_optimizer: [0, 1]
    scheduler_monitor: ["loss", "loss"]
    objective_args:
      nll:
        code: >
          def func(training_module, batch):
            t = training_module.forward(batch)
            res = t['log_prob']
            return -res.mean()
        function_of_interest: func

trainer:
  # callbacks
  callbacks:
    - class_path: ocd.training.callbacks.data_visualizer.DataVisualizer
    - class_path: ocd.training.callbacks.phase_changer.PhaseChangerCallback
      init_args:
        starting_phase: maximization
        # Set to higher value for faster results
        # The settings regarding epoch limit values
        maximization_epoch_limit: 70
        expectation_epoch_limit: 70
        # The settings regarding the generalization gap
        patience: 25
        threshold: 0.0001
        cooldown: 200
        reset_optimizers: True
        reinitialize_weights_on_maximization: False
    - class_path: ocd.training.callbacks.birkhoff_visualizer.BirkhoffCallback
      init_args:
        epoch_buffer_size: 1
        evaluate_every_n_epochs: 5
    - class_path: ocd.training.callbacks.save_results.SavePermutationResultsCallback
      init_args:
        save_path: experiments/simple/my-saves
        num_samples: 1000
        log_every_n_epochs: 5
        save_every_n_epochs: 5
    - class_path: ocd.training.callbacks.checkpointing.DebuggedModelCheckpoint
      init_args:
        dirpath: experiments/simple/checkpoints
        save_last: true
        verbose: true
        every_n_epochs: 1
  accelerator: gpu
  devices: 1
  num_nodes: 0
  max_epochs: 1500 # SWEEP on this
  log_every_n_steps: 1
  check_val_every_n_epoch: 1
  enable_checkpointing: true
  enable_model_summary: true
  enable_progress_bar: false
  logger:
    class_path: lightning.pytorch.loggers.WandbLogger
    init_args:
      project: simple-trainer
